(function(o,u){typeof exports=="object"&&typeof module<"u"?u(exports):typeof define=="function"&&define.amd?define(["exports"],u):(o=typeof globalThis<"u"?globalThis:o||self,u(o.WebDirective={}))})(this,(function(o){"use strict";function u(){if(!h.currentContext)throw new Error("No active context found.");return h.currentContext}const a=`__webDirective.${p()}`;function g(c,n,t){const i=c;if(i[a]??={},t===!1){const e=i[a][n];return delete i[a][n],e}return!i[a][n]&&t&&(i[a][n]=t(c)),i[a][n]}function p(){return Math.random().toString(36).substring(2,10)}function D(c,n,t,i){const{el:e,binding:s}=u();c.addEventListener(n,t,i);const r=()=>{c.removeEventListener(n,t,i)};return e.addEventListener("__wd:unmounted:"+s.directive,f=>{r()},{once:!0}),r}function A(c){return c.replace(/-([a-z])/g,n=>n[1].toUpperCase())}function E(c){return c.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function x(){return Promise.resolve().then()}const C={prefix:"w-",eventPrefix:"wd:",enableAttrParams:!1,enableChildrenUpdated:!1},l=class l{constructor(n={}){this.directives={},this.attachedElements=new WeakMap,this.listenTarget=document.body,this.hooks={mounted:{before:(t,i)=>{const e=i.directive;i.name;let s=this.attachedElements.get(t);s||this.attachedElements.set(t,s={el:t,disconnect:this.observeAttachedElement(t),directives:[]}),s.directives.includes(e)||s.directives.push(e)}},unmounted:{after:(t,i)=>{const e=i.directive,s=this.attachedElements.get(t);if(s){const r=s.directives.indexOf(e);r>-1&&s.directives.splice(r,1),s.directives.length===0&&(s.disconnect(),this.attachedElements.delete(t))}}}},this.options=Object.assign({},C,n)}listen(n){if(this.disconnectCallback)throw new Error("This instance has already listening.");this.listenTarget=n||document.body;const t=this.observeRoot(this.listenTarget);this.disconnectCallback=()=>{t();for(const i in this.directives)for(const e of this.directives[i].elements)for(const s of this.findDirectivesFromNode(e,i))this.runDirectiveIfExists(s,e,"unmounted")};for(const i in this.directives)this.findAndRunDirectivesOfSubtree(this.listenTarget,"mounted",void 0,i)}register(n,t){const i=this.getDirectiveAttrName(n);this.directives[i]={name:i,handler:t,elements:[]},this.disconnectCallback&&this.findAndRunDirectivesOfSubtree(this.listenTarget,"mounted",void 0,i)}observeRoot(n){const t=new MutationObserver(i=>{for(const e of i){for(const r of e.addedNodes)this.findAndRunDirectivesOfNode(r,"mounted",e),this.findAndRunDirectivesOfSubtree(r,"mounted",e);for(const r of e.removedNodes)this.findAndRunDirectivesOfNode(r,"unmounted",e),this.findAndRunDirectivesOfSubtree(r,"unmounted",e);const s=e.target.getAttribute(e.attributeName);e.type==="attributes"&&s!=null&&this.runDirectiveIfExists(e.attributeName,e.target,e.oldValue==null?"mounted":"updated",e)}});return t.observe(n,{attributes:!0,attributeOldValue:!0,childList:this.options.enableChildrenUpdated,characterData:!1,subtree:!0}),()=>{t.disconnect()}}observeAttachedElement(n){const t=new MutationObserver(i=>{for(const e of i)if(e.type==="attributes"&&e.attributeName&&e.target===n&&(e.target.getAttribute(e.attributeName)?this.runDirectiveIfExists(e.attributeName,e.target,"updated",e):this.runDirectiveIfExists(e.attributeName,e.target,"unmounted",e)),this.options.enableChildrenUpdated&&e.type==="childList")for(const s of this.findDirectivesFromNode(n))this.runDirectiveIfExists(s,n,"childrenUpdated",e)});return t.observe(n,{attributes:!0,childList:this.options.enableChildrenUpdated,subtree:this.options.enableChildrenUpdated,characterData:!0,attributeOldValue:!0,characterDataOldValue:!0}),()=>{t.disconnect()}}remove(n){const t=this.getDirectiveAttrName(n);if(this.directives[t]){for(const i of this.directives[t].elements)for(const e of this.findDirectivesFromNode(i,t))this.runDirectiveIfExists(e,i,"unmounted");delete this.directives[t]}}getPrefix(){return this.options.prefix}getDirectiveAttrName(n){return`${this.getPrefix()}${n}`}disconnect(){this.disconnectCallback&&(this.disconnectCallback(),this.disconnectCallback=void 0)}getDirectiveInfo(n){return this.directives[n]}splitDirectiveArgs(n){const[t,...i]=n.split("."),[e,s]=t.split(":"),r={};return i.forEach(f=>{r[A(f)]=!0}),{name:e,arg:s||null,modifiers:r}}runDirectiveIfExists(n,t,i,e=void 0){const{name:s,arg:r,modifiers:f}=this.splitDirectiveArgs(n),v=this.getDirectiveInfo(s);if(!v)return;if(i==="mounted")v.elements.push(t);else if(i==="unmounted"){const b=v.elements.indexOf(t);b>-1&&v.elements.splice(b,1)}const m=v.handler,d={directive:n,name:s,node:t,value:t.getAttribute(n),oldValue:e?.oldValue,mutation:e,handler:m,arg:r,modifiers:f,instance:this};l.currentContext={el:t,binding:d},this.hooks?.[i]?.before&&this.hooks[i]?.before?.(t,d),i in m&&m[i]?.(t,d),this.hooks?.[i]?.after&&this.hooks[i]?.after?.(t,d);const N=this.options.eventPrefix;t.dispatchEvent(new CustomEvent(N+E(i),{detail:{el:t,binding:d}})),t.dispatchEvent(new CustomEvent(`__wd:${i}:${d.directive}`,{detail:{el:t,binding:d}})),l.currentContext=null}findAndRunDirectivesOfNode(n,t,i,e){for(const s of this.findDirectivesFromNode(n,e))this.runDirectiveIfExists(s,n,t,i)}findAndRunDirectivesOfSubtree(n,t,i,e){if("querySelectorAll"in n)if(this.options.enableAttrParams)for(const s of n.querySelectorAll("*"))this.findAndRunDirectivesOfNode(s,t,i,e);else{const s=e?[e]:Object.keys(this.directives);for(const r of s)for(const f of n.querySelectorAll(`[${r}]`))this.runDirectiveIfExists(r,f,t)}}findDirectivesFromNode(n,t){const i=[];return n.getAttributeNames?(n.getAttributeNames().forEach(e=>{e.startsWith(this.getPrefix())&&(t?e.startsWith(t)&&i.push(e):i.push(e))}),i):[]}};l.currentContext=null;let h=l;o.default=h,o.nextTick=x,o.singleton=g,o.useCurrentContext=u,o.useEventListener=D,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
//# sourceMappingURL=web-directive.umd.cjs.map
