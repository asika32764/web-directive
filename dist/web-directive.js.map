{"version":3,"file":"web-directive.js","sources":["../src/index.ts"],"sourcesContent":["import type { WebDirectiveBaseHook, WebDirectiveHandler, WebDirectiveOptions } from './types';\n\nconst disconnectKey = '_webDirectiveDisconnectors';\n\nconst defaultOptions: Required<WebDirectiveOptions> = {\n  prefix: 'w-',\n};\n\nclass WebDirective {\n  directives: Record<string, WebDirectiveHandler> = {};\n\n  instances: Record<string, any[]> = {};\n\n  listenTarget: HTMLElement = document.body;\n\n  options: Required<WebDirectiveOptions>;\n\n  disconnectCallback?: (() => void);\n\n  hooks: {\n    mounted: {\n      before?: WebDirectiveBaseHook;\n      after?: WebDirectiveBaseHook;\n    };\n    unmounted: {\n      before?: WebDirectiveBaseHook;\n      after?: WebDirectiveBaseHook;\n    };\n    updated?: {\n      before?: WebDirectiveBaseHook;\n      after?: WebDirectiveBaseHook;\n    }\n  } = {\n    mounted: {\n      before: (directive: string, node: Element) => {\n        node[disconnectKey] = node[disconnectKey] || {};\n        node[disconnectKey][directive] = this.observeChildren(node);\n\n        this.instances[directive] = this.instances[directive] || [];\n        this.instances[directive].push(node);\n      }\n    },\n    unmounted: {\n      after: (directive, node: Element) => {\n        if (!node[disconnectKey]) {\n          return;\n        }\n\n        if (node[disconnectKey][directive]) {\n          node[disconnectKey][directive]();\n          delete node[disconnectKey][directive];\n        }\n      }\n    }\n  };\n\n  constructor(options: WebDirectiveOptions = {}) {\n    this.options = Object.assign({}, defaultOptions, options);\n  }\n\n  register(name: string, handler: WebDirectiveHandler) {\n    const directive = this.getDirectiveAttrName(name);\n    this.directives[directive] = handler;\n\n    // If listen not start, just register and back\n    if (!this.disconnectCallback) {\n      return;\n    }\n\n    // If listen already started, mount this directive\n    this.mountDirectiveInitial(directive);\n  }\n\n  private mountDirectiveInitial(directive: string) {\n    const elements = Array.from(this.listenTarget.querySelectorAll<HTMLElement>('*'));\n\n    for (const element of elements) {\n      const attributes = element.getAttributeNames();\n\n      for (const attribute of attributes) {\n        console.log(attribute);\n        if (attribute.startsWith(directive)) {\n          this.runDirectiveIfExists(directive, element, 'mounted');\n        }\n      }\n    }\n  }\n\n  remove(name: string) {\n    // Todo: Handle with args\n    const directive = this.getDirectiveAttrName(name);\n\n    if (this.instances[directive]) {\n      this.instances[directive].forEach((node) => {\n        this.runDirectiveIfExists(directive, node, 'unmounted');\n      });\n\n      delete this.instances[directive];\n    }\n\n    delete this.directives[directive];\n  }\n\n  getPrefix() {\n    return this.options.prefix;\n  }\n\n  getDirectiveAttrName(name: string): string {\n    return `${this.getPrefix()}${name}`;\n  }\n\n  private observeRoot(element: Element): () => void {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        // Added Nodes\n        [].forEach.call(mutation.addedNodes, (node: Node) => {\n          this.findDirectivesFromNode(node as Element).forEach((directive) => {\n            this.runDirectiveIfExists(directive, node as HTMLElement, 'mounted', mutation);\n          });\n\n          // Find children with all directives\n          for (const directive in this.directives) {\n            if ('querySelectorAll' in node) {\n              (node as HTMLElement).querySelectorAll<HTMLElement>(`[${directive}]`).forEach((node: HTMLElement) => {\n                this.runDirectiveIfExists(directive, node, 'mounted', mutation);\n              });\n            }\n          }\n        });\n\n        [].forEach.call(mutation.removedNodes, (node: Element) => {\n          this.findDirectivesFromNode(node).forEach((directive) => {\n            this.runDirectiveIfExists(directive, node as HTMLElement, 'unmounted', mutation);\n          });\n        });\n\n        if (mutation.type === 'attributes' && mutation.oldValue == null) {\n          this.runDirectiveIfExists(mutation.attributeName!, mutation.target as HTMLElement, 'mounted', mutation);\n        }\n      });\n    });\n\n    observer.observe(element, {\n      attributes: true,\n      attributeOldValue: true,\n      childList: true,\n      characterData: false,\n      subtree: true\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }\n\n  private observeChildren(element: Element): () => void {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        // Remove\n        if (mutation.type === 'attributes' && !(mutation.target as Element).getAttribute(mutation.attributeName!)) {\n          this.runDirectiveIfExists(mutation.attributeName!, mutation.target as HTMLElement, 'unmounted', mutation);\n        }\n\n        this.findDirectivesFromNode(mutation.target as Element).forEach((directive) => {\n          // Attributes\n          if (mutation.type === 'attributes' || mutation.type === 'childList') {\n            this.runDirectiveIfExists(directive, mutation.target as HTMLElement, 'updated', mutation);\n          }\n        });\n      });\n    });\n\n    observer.observe(element, {\n      attributes: true,\n      childList: true,\n      characterData: true,\n      attributeOldValue: true,\n      characterDataOldValue: true,\n      attributeFilter: Object.keys(this.directives)\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }\n\n  listen(target?: HTMLElement): void {\n    if (this.disconnectCallback) {\n      throw new Error('This instance has already listening.');\n    }\n\n    this.listenTarget = target || document.body;\n\n    this.disconnectCallback = this.observeRoot(this.listenTarget);\n\n    // Mount registered directive before listen.\n    for (const directive in this.directives) {\n      this.mountDirectiveInitial(directive);\n    }\n  }\n\n  disconnect() {\n    if (this.disconnectCallback) {\n      this.disconnectCallback();\n      this.disconnectCallback = undefined;\n    }\n  }\n\n  getDirective(directive: string): WebDirectiveHandler {\n    return this.directives[directive];\n  }\n\n  private splitDirectiveArgs(directive: string) {\n    const [nameWithArg, ...modifierParts] = directive.split('.');\n    const [name, arg] = nameWithArg.split(':');\n\n    const modifiers: Record<string, boolean> = {};\n    modifierParts.forEach((mod) => {\n      modifiers[mod] = true;\n    });\n\n    return { name, arg: arg || null, modifiers };\n  }\n\n  private runDirectiveIfExists(\n    directive: string,\n    node: HTMLElement,\n    task: 'mounted' | 'unmounted' | 'updated',\n    mutation: MutationRecord | undefined = undefined\n  ) {\n    console.log(directive);\n    const { name, arg, modifiers } = this.splitDirectiveArgs(directive);\n    directive = name;\n\n    const handler = this.getDirective(directive);\n\n    if (handler && task in handler) {\n      if (this.hooks?.[task]?.before) {\n        this.hooks[task]?.before?.(directive, node);\n      }\n\n      handler[task]?.(node, {\n        directive,\n        node,\n        value: node.getAttribute(directive),\n        oldValue: mutation?.oldValue,\n        mutation,\n        handler,\n        arg,\n        modifiers\n      });\n\n      if (this.hooks?.[task]?.after) {\n        this.hooks[task]?.after?.(directive, node);\n      }\n    }\n  }\n\n  private findDirectivesFromNode(node: Element): string[] {\n    const directives: string[] = [];\n\n    if (!node.getAttributeNames) {\n      return [];\n    }\n\n    node.getAttributeNames().forEach((e) => {\n      if (e.startsWith(this.getPrefix())) {\n        directives.push(e);\n      }\n    });\n\n    return directives;\n  }\n}\n\nexport default WebDirective;\n"],"names":["disconnectKey","defaultOptions","WebDirective","options","directive","node","name","handler","elements","element","attributes","attribute","observer","mutations","mutation","target","nameWithArg","modifierParts","arg","modifiers","mod","task","directives"],"mappings":"AAEA,MAAMA,IAAgB,8BAEhBC,IAAgD;AAAA,EACpD,QAAQ;AACV;AAEA,MAAMC,EAAa;AAAA,EAgDjB,YAAYC,IAA+B,IAAI;AA/C/C,SAAA,aAAkD,CAAA,GAElD,KAAA,YAAmC,CAAA,GAEnC,KAAA,eAA4B,SAAS,MAMrC,KAAA,QAaI;AAAA,MACF,SAAS;AAAA,QACP,QAAQ,CAACC,GAAmBC,MAAkB;AAC5C,UAAAA,EAAKL,CAAa,IAAIK,EAAKL,CAAa,KAAK,CAAA,GAC7CK,EAAKL,CAAa,EAAEI,CAAS,IAAI,KAAK,gBAAgBC,CAAI,GAE1D,KAAK,UAAUD,CAAS,IAAI,KAAK,UAAUA,CAAS,KAAK,CAAA,GACzD,KAAK,UAAUA,CAAS,EAAE,KAAKC,CAAI;AAAA,QACrC;AAAA,MAAA;AAAA,MAEF,WAAW;AAAA,QACT,OAAO,CAACD,GAAWC,MAAkB;AACnC,UAAKA,EAAKL,CAAa,KAInBK,EAAKL,CAAa,EAAEI,CAAS,MAC/BC,EAAKL,CAAa,EAAEI,CAAS,EAAA,GAC7B,OAAOC,EAAKL,CAAa,EAAEI,CAAS;AAAA,QAExC;AAAA,MAAA;AAAA,IACF,GAIA,KAAK,UAAU,OAAO,OAAO,CAAA,GAAIH,GAAgBE,CAAO;AAAA,EAC1D;AAAA,EAEA,SAASG,GAAcC,GAA8B;AACnD,UAAMH,IAAY,KAAK,qBAAqBE,CAAI;AAIhD,IAHA,KAAK,WAAWF,CAAS,IAAIG,GAGxB,KAAK,sBAKV,KAAK,sBAAsBH,CAAS;AAAA,EACtC;AAAA,EAEQ,sBAAsBA,GAAmB;AAC/C,UAAMI,IAAW,MAAM,KAAK,KAAK,aAAa,iBAA8B,GAAG,CAAC;AAEhF,eAAWC,KAAWD,GAAU;AAC9B,YAAME,IAAaD,EAAQ,kBAAA;AAE3B,iBAAWE,KAAaD;AACtB,gBAAQ,IAAIC,CAAS,GACjBA,EAAU,WAAWP,CAAS,KAChC,KAAK,qBAAqBA,GAAWK,GAAS,SAAS;AAAA,IAG7D;AAAA,EACF;AAAA,EAEA,OAAOH,GAAc;AAEnB,UAAMF,IAAY,KAAK,qBAAqBE,CAAI;AAEhD,IAAI,KAAK,UAAUF,CAAS,MAC1B,KAAK,UAAUA,CAAS,EAAE,QAAQ,CAACC,MAAS;AAC1C,WAAK,qBAAqBD,GAAWC,GAAM,WAAW;AAAA,IACxD,CAAC,GAED,OAAO,KAAK,UAAUD,CAAS,IAGjC,OAAO,KAAK,WAAWA,CAAS;AAAA,EAClC;AAAA,EAEA,YAAY;AACV,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,qBAAqBE,GAAsB;AACzC,WAAO,GAAG,KAAK,UAAA,CAAW,GAAGA,CAAI;AAAA,EACnC;AAAA,EAEQ,YAAYG,GAA8B;AAChD,UAAMG,IAAW,IAAI,iBAAiB,CAACC,MAAc;AACnD,MAAAA,EAAU,QAAQ,CAACC,MAAa;AAE9B,SAAA,EAAG,QAAQ,KAAKA,EAAS,YAAY,CAACT,MAAe;AACnD,eAAK,uBAAuBA,CAAe,EAAE,QAAQ,CAACD,MAAc;AAClE,iBAAK,qBAAqBA,GAAWC,GAAqB,WAAWS,CAAQ;AAAA,UAC/E,CAAC;AAGD,qBAAWV,KAAa,KAAK;AAC3B,YAAI,sBAAsBC,KACvBA,EAAqB,iBAA8B,IAAID,CAAS,GAAG,EAAE,QAAQ,CAACC,MAAsB;AACnG,mBAAK,qBAAqBD,GAAWC,GAAM,WAAWS,CAAQ;AAAA,YAChE,CAAC;AAAA,QAGP,CAAC,GAED,CAAA,EAAG,QAAQ,KAAKA,EAAS,cAAc,CAACT,MAAkB;AACxD,eAAK,uBAAuBA,CAAI,EAAE,QAAQ,CAACD,MAAc;AACvD,iBAAK,qBAAqBA,GAAWC,GAAqB,aAAaS,CAAQ;AAAA,UACjF,CAAC;AAAA,QACH,CAAC,GAEGA,EAAS,SAAS,gBAAgBA,EAAS,YAAY,QACzD,KAAK,qBAAqBA,EAAS,eAAgBA,EAAS,QAAuB,WAAWA,CAAQ;AAAA,MAE1G,CAAC;AAAA,IACH,CAAC;AAED,WAAAF,EAAS,QAAQH,GAAS;AAAA,MACxB,YAAY;AAAA,MACZ,mBAAmB;AAAA,MACnB,WAAW;AAAA,MACX,eAAe;AAAA,MACf,SAAS;AAAA,IAAA,CACV,GAEM,MAAM;AACX,MAAAG,EAAS,WAAA;AAAA,IACX;AAAA,EACF;AAAA,EAEQ,gBAAgBH,GAA8B;AACpD,UAAMG,IAAW,IAAI,iBAAiB,CAACC,MAAc;AACnD,MAAAA,EAAU,QAAQ,CAACC,MAAa;AAE9B,QAAIA,EAAS,SAAS,gBAAgB,CAAEA,EAAS,OAAmB,aAAaA,EAAS,aAAc,KACtG,KAAK,qBAAqBA,EAAS,eAAgBA,EAAS,QAAuB,aAAaA,CAAQ,GAG1G,KAAK,uBAAuBA,EAAS,MAAiB,EAAE,QAAQ,CAACV,MAAc;AAE7E,WAAIU,EAAS,SAAS,gBAAgBA,EAAS,SAAS,gBACtD,KAAK,qBAAqBV,GAAWU,EAAS,QAAuB,WAAWA,CAAQ;AAAA,QAE5F,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAED,WAAAF,EAAS,QAAQH,GAAS;AAAA,MACxB,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,eAAe;AAAA,MACf,mBAAmB;AAAA,MACnB,uBAAuB;AAAA,MACvB,iBAAiB,OAAO,KAAK,KAAK,UAAU;AAAA,IAAA,CAC7C,GAEM,MAAM;AACX,MAAAG,EAAS,WAAA;AAAA,IACX;AAAA,EACF;AAAA,EAEA,OAAOG,GAA4B;AACjC,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,sCAAsC;AAGxD,SAAK,eAAeA,KAAU,SAAS,MAEvC,KAAK,qBAAqB,KAAK,YAAY,KAAK,YAAY;AAG5D,eAAWX,KAAa,KAAK;AAC3B,WAAK,sBAAsBA,CAAS;AAAA,EAExC;AAAA,EAEA,aAAa;AACX,IAAI,KAAK,uBACP,KAAK,mBAAA,GACL,KAAK,qBAAqB;AAAA,EAE9B;AAAA,EAEA,aAAaA,GAAwC;AACnD,WAAO,KAAK,WAAWA,CAAS;AAAA,EAClC;AAAA,EAEQ,mBAAmBA,GAAmB;AAC5C,UAAM,CAACY,GAAa,GAAGC,CAAa,IAAIb,EAAU,MAAM,GAAG,GACrD,CAACE,GAAMY,CAAG,IAAIF,EAAY,MAAM,GAAG,GAEnCG,IAAqC,CAAA;AAC3C,WAAAF,EAAc,QAAQ,CAACG,MAAQ;AAC7B,MAAAD,EAAUC,CAAG,IAAI;AAAA,IACnB,CAAC,GAEM,EAAE,MAAAd,GAAM,KAAKY,KAAO,MAAM,WAAAC,EAAA;AAAA,EACnC;AAAA,EAEQ,qBACNf,GACAC,GACAgB,GACAP,IAAuC,QACvC;AACA,YAAQ,IAAIV,CAAS;AACrB,UAAM,EAAE,MAAAE,GAAM,KAAAY,GAAK,WAAAC,MAAc,KAAK,mBAAmBf,CAAS;AAClE,IAAAA,IAAYE;AAEZ,UAAMC,IAAU,KAAK,aAAaH,CAAS;AAE3C,IAAIG,KAAWc,KAAQd,MACjB,KAAK,QAAQc,CAAI,GAAG,UACtB,KAAK,MAAMA,CAAI,GAAG,SAASjB,GAAWC,CAAI,GAG5CE,EAAQc,CAAI,IAAIhB,GAAM;AAAA,MACpB,WAAAD;AAAA,MACA,MAAAC;AAAA,MACA,OAAOA,EAAK,aAAaD,CAAS;AAAA,MAClC,UAAUU,GAAU;AAAA,MACpB,UAAAA;AAAA,MACA,SAAAP;AAAA,MACA,KAAAW;AAAA,MACA,WAAAC;AAAA,IAAA,CACD,GAEG,KAAK,QAAQE,CAAI,GAAG,SACtB,KAAK,MAAMA,CAAI,GAAG,QAAQjB,GAAWC,CAAI;AAAA,EAG/C;AAAA,EAEQ,uBAAuBA,GAAyB;AACtD,UAAMiB,IAAuB,CAAA;AAE7B,WAAKjB,EAAK,qBAIVA,EAAK,kBAAA,EAAoB,QAAQ,CAAC,MAAM;AACtC,MAAI,EAAE,WAAW,KAAK,UAAA,CAAW,KAC/BiB,EAAW,KAAK,CAAC;AAAA,IAErB,CAAC,GAEMA,KATE,CAAA;AAAA,EAUX;AACF;"}