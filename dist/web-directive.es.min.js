const c="_webDirectiveDisconnectors",a={prefix:"w-"};class o{constructor(i={}){this.directives={},this.instances={},this.listenTarget=document.body,this.hooks={mounted:{before:(e,t)=>{t[c]=t[c]||{},t[c][e]=this.observeChildren(t),this.instances[e]=this.instances[e]||[],this.instances[e].push(t)}},unmounted:{after:(e,t)=>{t[c]&&t[c][e]&&(t[c][e](),delete t[c][e])}}},this.options=Object.assign({},a,i)}register(i,e){const t=this.getDirectiveAttrName(i);this.directives[t]=e,this.disconnectCallback&&this.mountDirectiveInitial(t)}mountDirectiveInitial(i){[].forEach.call(this.listenTarget.querySelectorAll("["+i+"]"),e=>{this.runDirectiveIfExists(i,e,"mounted")})}remove(i){const e=this.getDirectiveAttrName(i);this.instances[e]&&(this.instances[e].forEach(t=>{this.runDirectiveIfExists(e,t,"unmounted")}),delete this.instances[e]),delete this.directives[e]}getPrefix(){return this.options.prefix}getDirectiveAttrName(i){return`${this.getPrefix()}${i}`}observeRoot(i){const e=new MutationObserver(t=>{t.forEach(s=>{[].forEach.call(s.addedNodes,r=>{this.findDirectivesFromNode(r).forEach(n=>{this.runDirectiveIfExists(n,r,"mounted",s)});for(const n in this.directives)"querySelectorAll"in r&&r.querySelectorAll(`[${n}]`).forEach(h=>{this.runDirectiveIfExists(n,h,"mounted",s)})}),[].forEach.call(s.removedNodes,r=>{this.findDirectivesFromNode(r).forEach(n=>{this.runDirectiveIfExists(n,r,"unmounted",s)})}),s.type==="attributes"&&s.oldValue==null&&this.runDirectiveIfExists(s.attributeName,s.target,"mounted",s)})});return e.observe(i,{attributes:!0,attributeOldValue:!0,childList:!0,characterData:!1,subtree:!0}),()=>{e.disconnect()}}observeChildren(i){const e=new MutationObserver(t=>{t.forEach(s=>{s.type==="attributes"&&!s.target.getAttribute(s.attributeName)&&this.runDirectiveIfExists(s.attributeName,s.target,"unmounted",s),this.findDirectivesFromNode(s.target).forEach(r=>{(s.type==="attributes"||s.type==="childList")&&this.runDirectiveIfExists(r,s.target,"updated",s)})})});return e.observe(i,{attributes:!0,childList:!0,characterData:!0,attributeOldValue:!0,characterDataOldValue:!0,attributeFilter:Object.keys(this.directives)}),()=>{e.disconnect()}}listen(i){if(this.disconnectCallback)throw new Error("This instance has already listening.");this.listenTarget=i||document.body,this.disconnectCallback=this.observeRoot(this.listenTarget);for(const e in this.directives)this.mountDirectiveInitial(e)}disconnect(){this.disconnectCallback&&(this.disconnectCallback(),this.disconnectCallback=void 0)}getDirective(i){return this.directives[i]}runDirectiveIfExists(i,e,t,s=void 0){const r=this.getDirective(i);r&&t in r&&(this.hooks?.[t]?.before&&this.hooks[t]?.before?.(i,e),r[t]?.(e,{directive:i,node:e,value:e.getAttribute(i),oldValue:s?.oldValue,mutation:s,dir:r}),this.hooks?.[t]?.after&&this.hooks[t]?.after?.(i,e))}findDirectivesFromNode(i){const e=[];return i.getAttributeNames?(i.getAttributeNames().forEach(t=>{t.startsWith(this.getPrefix())&&e.push(t)}),e):[]}}export{o as default};
//# sourceMappingURL=web-directive.es.min.js.map
